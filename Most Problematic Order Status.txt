-->> Table: order_status

----------+-----------------+---------------------
 order_id | order_status_id |       timest        
----------+-----------------+---------------------
        1 |               2 | 2019-12-24 00:00:00
        1 |               3 | 2019-12-24 00:10:00
        1 |               4 | 2019-12-24 00:30:00
        1 |               5 | 2019-12-24 01:00:00
        2 |               2 | 2019-12-24 15:00:00
        2 |               3 | 2019-12-24 15:07:00
        2 |               9 | 2019-12-24 15:10:00
        2 |               8 | 2019-12-24 15:33:00
        2 |              10 | 2019-12-24 16:00:00
        4 |               4 | 2019-12-24 19:00:00
        4 |               2 | 2019-12-24 19:30:00
        4 |               3 | 2019-12-24 19:32:00
        4 |               4 | 2019-12-24 19:40:00
        4 |               5 | 2019-12-24 19:45:00
        5 |               2 | 2019-01-28 19:30:00
        4 |               6 | 2019-01-28 19:48:00
----------+-----------------+---------------------

- This table "order_status" shows us all the order statuses that each order went through.
- In this table, we have the "order_id", "order_status_id" and "timestamps".
- "timest" column tells us when each order status has happened.
- As you can see, the "order_id" is not unique in this table.


-->>Table: contact

----------+---------------------
 order_id |    contact_time     
----------+---------------------
        1 | 2019-12-24 00:25:00
        2 | 2019-12-24 15:30:00
        4 | 2019-12-24 19:38:00
        5 | 2019-01-28 19:46:00
----------+---------------------


- From the table "contact", we can understand when the customer has contacted us.
- As you can see, the "order_id" is unique in this table. 

- The problem we need to solve:
- In order to decrease the number of contacts we have from customers, we need to understand why they are contacting us? 
- In other words, which order status is most problematic for the customer that makes them contact us.

- We need you as an Analyst to tell us for each order, what is the last order status before the customer contacting us?


-->> Expected output :

----------------------------------+-------------------------------------
 most_problematic_order_status_id | most_problematic_order_status_count 
----------------------------------+-------------------------------------
                                3 |                                   2
----------------------------------+-------------------------------------



-->> PostgreSQL Script :

CREATE TABLE order_status(
	order_id INT,
	order_status_id INT,
	timest TIMESTAMP
);

INSERT INTO order_status VALUES (1,2,'24-12-2019 00:00:00');
INSERT INTO order_status VALUES (1,3,'24-12-2019 00:10:00');
INSERT INTO order_status VALUES (1,4,'24-12-2019 00:30:00');
INSERT INTO order_status VALUES (1,5,'24-12-2019 01:00:00');
INSERT INTO order_status VALUES (2,2,'24-12-2019 15:00:00');
INSERT INTO order_status VALUES (2,3,'24-12-2019 15:07:00');
INSERT INTO order_status VALUES (2,9,'24-12-2019 15:10:00');
INSERT INTO order_status VALUES (2,8,'24-12-2019 15:33:00');
INSERT INTO order_status VALUES (2,10,'24-12-2019 16:00:00');
INSERT INTO order_status VALUES (4,4,'24-12-2019 19:00:00');
INSERT INTO order_status VALUES (4,2,'24-12-2019 19:30:00');
INSERT INTO order_status VALUES (4,3,'24-12-2019 19:32:00');
INSERT INTO order_status VALUES (4,4,'24-12-2019 19:40:00');
INSERT INTO order_status VALUES (4,5,'24-12-2019 19:45:00');
INSERT INTO order_status VALUES (5,2,'28-01-2019 19:30:00');
INSERT INTO order_status VALUES (4,6,'28-01-2019 19:48:00');


CREATE TABLE contact(
	order_id INT,
	contact_time TIMESTAMP
);

INSERT INTO contact VALUES (1,'24-12-2019 00:25:00');
INSERT INTO contact VALUES (2,'24-12-2019 15:30:00');
INSERT INTO contact VALUES (4,'24-12-2019 19:38:00');
INSERT INTO contact VALUES (5,'28-01-2019 19:46:00');


-->> Solution :

WITH order_status_before_contact AS (
	SELECT o.*,
		MAX(o.timest) OVER (PARTITION BY o.order_id) time_before_call
	FROM order_status o
	INNER JOIN contact c ON o.order_id = c.order_id AND o.timest < c.contact_time
	ORDER BY 1,3
)
SELECT order_status_id most_problematic_order_status_id, COUNT(order_id) AS most_problematic_order_status_count
FROM order_status_before_contact
WHERE timest = time_before_call
GROUP BY order_status_id
ORDER BY most_problematic_order_status_count DESC
LIMIT 1;
